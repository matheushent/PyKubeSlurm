{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyKubeSlurm Documentation","text":"<p>Welcome to the PyKubeSlurm documentation. Learn about PyKubeSlurm's features, usage process, and how to effectively utilize this powerful tool for job management in your Slurm cluster using a Kubernetes operator as orchestrator.</p> <p>PyKubeSlurm simplifies the complexities of job scheduling in Slurm environments, offering a user-friendly solution that integrates seamlessly with any Kubernetes cluster. With PyKubeSlurm, you can streamline job execution and optimize resource management without extensive programming skills.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Seamless Integration: PyKubeSlurm integrates effortlessly into your Kubernetes environment, enabling you to manage Slurm job scheduling with ease.</li> <li>GitOps Workflow: Embrace a GitOps-oriented workflow for better resource management, enhanced replicability, and efficient job scheduling.</li> <li>Unified Operational Workflow: Whether in traditional Kubernetes or charmed Kubernetes deployments, PyKubeSlurm ensures consistent and reliable job execution.</li> <li>Python-Powered: PyKubeSlurm leverages Python to empower engineers to focus on the logic and requirements of their jobs.</li> </ul>"},{"location":"authors/","title":"Authors","text":"<ul> <li>Matheus Tosta</li> <li>Email: me@mtosta.dev</li> </ul>"},{"location":"authors/#get-in-touch","title":"Get in Touch","text":"<p>Feel free to reach out to us via email if you have any questions or suggestions regarding the PyKubeSlurm project.</p>"},{"location":"reference/pykubeslurm/","title":"PyKubeSlurm","text":""},{"location":"reference/pykubeslurm/#pykubeslurm","title":"pykubeslurm","text":""},{"location":"reference/pykubeslurm/#pykubeslurm.errors","title":"errors","text":"<p>Core module for mapping common Slurmrestd errors.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.events","title":"events","text":"<p>Core module for event based logic operations.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.events.event_listener","title":"event_listener","text":"<pre><code>event_listener(thread_event: threading.Event)\n</code></pre> <p>Listen for kubernetes events.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.health_check","title":"health_check","text":"<p>Core module for defining the health check server logic.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.health_check.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check(request: web.Request) -&gt; web.Response\n</code></pre> <p>HTTP request handler to check the health of the server.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>web.Response: A web response with \"OK\" to indicate the server is healthy.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.health_check.init_health_check","title":"init_health_check","text":"<pre><code>init_health_check()\n</code></pre> <p>Initialize the health check server.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.health_check.main","title":"main  <code>async</code>","text":"<pre><code>main()\n</code></pre> <p>Start an aiohttp-based HTTP server to handle health checks.</p> <p>This function creates a simple HTTP server that responds to GET requests at the '/health' endpoint to indicate the server's health.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.helpers","title":"helpers","text":"<p>Core module for general helper functions.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.helpers.datetime_in_string","title":"datetime_in_string","text":"<pre><code>datetime_in_string() -&gt; str\n</code></pre> <p>Return the current datetime in string format.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.helpers.handle_k8s_event","title":"handle_k8s_event","text":"<pre><code>handle_k8s_event(event: KubernetesEvent)\n</code></pre> <p>Handle kubernetes events.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.helpers.insert_body_in_object_annotation","title":"insert_body_in_object_annotation","text":"<pre><code>insert_body_in_object_annotation(object: dict) -&gt; dict\n</code></pre> <p>Insert the current object in itself by creating a custom annotation.</p> <p>This is mainly used for internal control of the resources when updating them.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.helpers.run_coroutines","title":"run_coroutines  <code>async</code>","text":"<pre><code>run_coroutines(*coros: Coroutine)\n</code></pre> <p>Run coroutines concurrently.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.main","title":"main","text":"<p>Main module for the Operator app.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.main.callback","title":"callback","text":"<pre><code>callback()\n</code></pre> <p>PyKubeSlurm - A Kubernetes Operator for scheduling jobs on Slurm.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.main.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the Operator app.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.scheduler","title":"scheduler","text":"<p>Core module for defining the reconciliation schedule logic.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.scheduler.init_scheduler","title":"init_scheduler","text":"<pre><code>init_scheduler()\n</code></pre> <p>Initialize the scheduler.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.scheduler.process_job_crd","title":"process_job_crd  <code>async</code>","text":"<pre><code>process_job_crd(job_status: JobStatus, name: str)\n</code></pre> <p>Process the Job CRD by fetching its data from slurmrestd and updating the SlurmJob CRD.</p> <p>Parameters:</p> Name Type Description Default <code>job_status</code> <code>JobStatus</code> <p>Job status instance model.</p> required <code>name</code> <code>str</code> <p>Name of the Job CRD.</p> required"},{"location":"reference/pykubeslurm/#pykubeslurm.scheduler.reconcile","title":"reconcile","text":"<pre><code>reconcile()\n</code></pre> <p>Reconcile jobs submitted to slurmrestd.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas","title":"schemas","text":"<p>Core module for defining Pydantic schemas or typed dictionaries.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.Job","title":"Job","text":"<p>             Bases: <code>KubernetesResource</code></p> <p>Job CRD model.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.Job.job_properties","title":"job_properties","text":"<pre><code>job_properties(exclude: None | list[str] = None) -&gt; dict\n</code></pre> <p>Dump the job properties into a dict.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.JobProperties","title":"JobProperties","text":"<p>             Bases: <code>BaseModel</code></p> <p>Job properties model.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.JobState","title":"JobState","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Slurm job state.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.JobStatus","title":"JobStatus","text":"<p>             Bases: <code>BaseModel</code></p> <p>Job status model.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.KubernetesEvent","title":"KubernetesEvent","text":"<p>             Bases: <code>BaseModel</code></p> <p>Kubernetes event model.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.KubernetesEventType","title":"KubernetesEventType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Kubernetes event type.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.KubernetesObjectMeta","title":"KubernetesObjectMeta","text":"<p>             Bases: <code>BaseModel</code></p> <p>Kubernetes object metadata.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.KubernetesResource","title":"KubernetesResource","text":"<p>             Bases: <code>BaseModel</code></p> <p>Common Kubernetes fields.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmVersion","title":"SlurmVersion","text":"<p>             Bases: <code>TypedDict</code></p> <p>Slurm semantic version.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdErrorPayload","title":"SlurmrestdErrorPayload","text":"<p>             Bases: <code>TypedDict</code></p> <p>Slurmrestd error type in the response payload.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdJobSubmissionResponse","title":"SlurmrestdJobSubmissionResponse","text":"<p>             Bases: <code>SlurmrestdResponse</code></p> <p>Slurmrestd response for the endpoint <code>POST /slurm/v0.0.36/job/submit</code>.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdMeta","title":"SlurmrestdMeta","text":"<p>             Bases: <code>TypedDict</code></p> <p>Slurmrestd meta info.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdPluginInfo","title":"SlurmrestdPluginInfo","text":"<p>             Bases: <code>TypedDict</code></p> <p>Slurmrestd plugin info.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdResponse","title":"SlurmrestdResponse","text":"<p>             Bases: <code>TypedDict</code></p> <p>Base slurmrestd response model.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.schemas.SlurmrestdSlurmInfo","title":"SlurmrestdSlurmInfo","text":"<p>             Bases: <code>TypedDict</code></p> <p>Provide detailed information about the Slurm version retrieved from Slurmrestd.</p> <p>Usually, the <code>release</code> field is composed as: .. code-block:: python     f\"{SlurmVersion.major}.{SlurmVersion.macro}.{SlurmVersion.minor}\"</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.settings","title":"settings","text":""},{"location":"reference/pykubeslurm/#pykubeslurm.settings.Settings","title":"Settings","text":"<p>             Bases: <code>BaseSettings</code></p> <p>General settings class for the entire application.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.settings.Settings.validate_debug_level","title":"validate_debug_level","text":"<pre><code>validate_debug_level(\nv: str, info: FieldValidationInfo\n) -&gt; str\n</code></pre> <p>Validate that the DEBUG_LEVEL is one of those allowed.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.slurmrestd_interface","title":"slurmrestd_interface","text":"<p>Core module for Jobbergate API identity management.</p> <p>Code adapted from the Cluster Agent project by Omnivector Solutions, LLC.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.slurmrestd_interface.BackendClient","title":"BackendClient","text":"<p>             Bases: <code>Client</code></p> <p>Client extension class to customize log messages and the auth method when a request is made to the Slurmrestd API.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.slurmrestd_interface.acquire_token","title":"acquire_token","text":"<pre><code>acquire_token(username: str) -&gt; str\n</code></pre> <p>Generate a JWT token to be used against Slurmrestd.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username which requests will be made on behalf of.</p> required <p>Returns:     str: The JWT token.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.slurmrestd_interface.inject_token","title":"inject_token","text":"<pre><code>inject_token(\nrequest: httpx.Request,\nusername: typing.Optional[str] = None,\n) -&gt; httpx.Request\n</code></pre> <p>Inject a token based on the provided username into the request.</p> <p>For requests that need to use something except the default username, this injector should be used at the request level (instead of at client initialization), for example:</p> <pre><code>client.get(url, auth=lambda r: inject_token(r, username=username))\n</code></pre> <p>Returns:</p> Type Description <code>Request</code> <p>httpx.Request: The intercepted request object.</p>"},{"location":"reference/pykubeslurm/#pykubeslurm.vars","title":"vars","text":"<p>Core module for defining variables use accros the app</p>"}]}